"use strict";
const video = document.getElementById("my-video"),
    btnCapture = document.getElementById("btn-capture"),
    btnUpload = document.getElementById("btn-upload"),
    inputPattern = document.querySelector("input[name=pattern]"),
    inputLabel = document.querySelector("input[name=label]"),
    startVideo = () => {
        navigator.mediaDevices
            .getUserMedia({ video: {} })
            .then((e) => {
                video.srcObject = e;
            })
            .catch((e) => console.error(e));
    },
    facesData = [];
let faceDescriptions = [],
    countHelper = 0;
Promise.all([
    faceapi.loadSsdMobilenetv1Model("/models"),
    faceapi.loadFaceRecognitionModel("/models"),
    faceapi.loadFaceLandmarkModel("/models"),
]).then(startVideo);
const detectFaces = async () => {
    const e = faceapi.createCanvasFromMedia(video),
        t = document.getElementById("target-video"),
        a = { width: video.offsetWidth, height: video.height };
    btnCapture.setAttribute("disabled", "disabled"),
        e.setAttribute("id", "canvas-layer"),
        t.append(e),
        faceapi.matchDimensions(e, a),
        setInterval(async () => {
            const t = await faceapi
                .detectSingleFace(video)
                .withFaceLandmarks()
                .withFaceDescriptor();
            if ((null !== t) & (void 0 !== t)) {
                t.detection.score >= 0.8 &&
                    countHelper < 10 &&
                    (faceDescriptions.push(t.descriptor), countHelper++);
                const i = faceapi.resizeResults(t, a);
                e.getContext("2d").clearRect(0, 0, e.width, e.height),
                    faceapi.draw.drawDetections(e, i);
            } else e.getContext("2d").clearRect(0, 0, e.width, e.height);
            if (countHelper == faceDescriptions.length && 10 === countHelper) {
                stopVideo();
                const e = new faceapi.LabeledFaceDescriptors(
                        inputLabel.value,
                        faceDescriptions
                    ),
                    t = JSON.stringify(e);
                inputPattern.value = t;
            }
        }, 100);
};
btnCapture.addEventListener("click", detectFaces),
    btnUpload.addEventListener("click", function () {
        "" != inputLabel.value.toString() && null != inputPattern.value
            ? document.querySelector("#form-pattern").submit()
            : alert("Your face pattern's is empty! Please recapture again.");
    });
const stopVideo = () => {
    video.pause(),
        navigator.mediaDevices
            .getUserMedia({ video: {} })
            .then((e) => {
                e.getTracks().forEach((e) => e.stop());
            })
            .catch((e) => console.error(e)),
        btnUpload.removeAttribute("disabled");
};
